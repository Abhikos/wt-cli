#!/usr/bin/env node

var Bluebird = require('bluebird');
var Boom = require('boom');
var Colors = require('colors');
var Jws = require('jws');
var Promptly = require('promptly');
var Webtask = require('../');
var Yargs = require('yargs');
var _ = require('lodash');

Bluebird.longStackTraces();
Bluebird.promisifyAll(Promptly);


var commands = {
    profile: {
        description: 'Manage webtask profiles',
        handler: require('./profile'),
    },
    token: {
        description: 'Manage webtask tokens',
        handler: require('./token'),
    },
    logs: {
        description: 'Streaming, real-time logs',
        handler: require('./logs'),
    },
};

var yargs = Yargs.usage('Usage: $0 <command>');

_.forEach(commands, function (commandDef, command) {
    yargs.command(command, commandDef.description, commandDef.handler);
});

var argv = yargs.usage('Usage: $0 profile <command> [options]')
    .option('profile', {
        alias: 'p',
        type: 'string',
    })
    .help('help')
    .version(require('../package.json').version)
    .check(function (argv) {
        var commandName = argv._[1];
        var command = commands[commandName];
        
        if (!commandName) throw new Error('Please enter a valid command.');
        if (!command) throw new Error('No such command `' + commandName + '`');
    })
    .argv;


// var argv = Yargs.usage('Usage: $0 <command>')
//     .command('token', 'create webtask tokens')
//     .command('log', 'streaming, real-time logs')
//     .command('profile', 'manage profiles', require('./profile'))
//     .command('cron', 'manage scheduled webtasks')
//     .command('nuke', 'nuke all secrets and credentials')
//     .demand(1, 'Please indicate the command that you would like to invoke.')
//     .help('help')
//     .argv;

return;


// var argv = Yargs
//   .usage('Usage: $0 [options] <command>')
//   .option('p', {
//     alias: 'profile',
//     description: 'config profile to use',
//     default: 'default',
//     type: 'string',
//   })
//   .command('cron', 'create and manage scheduled webtasks', require('./cron'))
//   .help('help')
//   .argv;

// console.log(argv);

// return;

var program = require('commander')
    , async = require('async')
    , path = require('path')
    , fs = require('fs')
    , bunyan = require('bunyan')
    , colors = require('colors')
    , jwt = require('jws')
    , request = require('request')
    , PrettyStream = require('bunyan-prettystream');

var prettyStdOut = new PrettyStream({ mode: 'short' });
prettyStdOut.pipe(process.stdout);
var logger = bunyan.createLogger({
      name: 'wt',
      streams: [{
          level: 'debug',
          type: 'raw',
          stream: prettyStdOut
      }]
});
logger.prettyStdOut = prettyStdOut;

// Place where ultimate actions can be stored for re-use
program.actions = {};

// Common utilities

program.wt = {
    config_file: path.join(
      process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'],
      '.webtask'),
    logger: logger,
    container_limits: {
        second: 'ls',
        minute: 'lm',
        hour: 'lh',
        day: 'ld',
        week: 'lw',
        month: 'lo'
    },
    token_limits: {
        second: 'lts',
        minute: 'ltm',
        hour: 'lth',
        day: 'ltd',
        week: 'ltw',
        month: 'lto'
    },
    parse_positive_int: function (name) {
        return function (val, def) {
          if (val === undefined) return def;
          if (!isNaN(val)) {
            val = +val;
            if (Math.floor(val) === val && val >= 0)
              return val;
          }
          console.log(('The `' + name + '` parameter must be a non-negative integer.').red);
          process.exit(1);
        }
    },
    collect_hash: function (prefix) {
      return function(val, memo) {
        var i = val.indexOf('=');
        if (i < 1) {
          console.log(('Unsupported ' + prefix + ' `' + val + '`. All ' + prefix + 's must be in the <key>=<value> format.').red);
          process.exit(1);
        }
        memo[val.substring(0, i)] = val.substring(i + 1);
        return memo;
      }
    },
    parse_regex: function(name, regex) {
        return function (val, def) {
            if (!val) return def;
            if (!regex.exec(val)) {
                console.log(('Invalid argument: `' + name + '` must match ' + regex + '.').red);
                process.exit(1);
            }
            return val;
        }
    },
    parse_time: function (name) {
        return function (val, def) {
            if (!val) return def;
            if (val[0] === '+')
              val = Date.now() + +val.substring(1) * 60 * 1000;
            else
              val = Date.parse(val);

            if (!isNaN(val)) {
              val = Math.floor(val / 1000);
              return val;
            }
            console.log(('Invalid value of `' + name + '`. Use RFC2822 format (e.g. Mon, 25 Dec 1995 13:30:00 GMT) or ISO 8601 format (e.g. 2011-10-10T14:48:00). You can also say +10 to indicate "ten minutes from now".').red);
            process.exit(1);
        }
    },
    print_profile: function (name, profile, details) {
      console.log('Profile:   '.blue, name.green);
      console.log('URL:       '.blue, profile.url);
      console.log('Container: '.blue, profile.container);
      console.log('Token:     '.blue, profile.token);
      if (details) {
        var json = JSON.parse(jwt.decode(profile.token).payload);
        var keys = Object.keys(json).sort();
        keys.forEach(function (key) {
          var name = 'Token.' + key + ':';
          while (name.length < 11) name += ' ';
          console.log(name.blue, json[key]);
        });
      }
    },
    ensure_profile: function (name) {
      var profiles = Object.keys(program.wt.config);
      if (profiles.length === 0) {
        console.log('No webtask profiles are configured. Did you run `wt init`?'.red);
        process.exit(1);
      }
      for (var i = 0; i < profiles.length; i++)
        if (profiles[i] === name)
          return program.wt.config[profiles[i]];
      console.log(('Profile `' + name + '` does not exist. Available profiles are: ' + 
        profiles.join(', ').red + '.').red);
      process.exit(1);
    },
    create_token: function (options, cb) {
      var params = {
        ten: options.container,
        dd: options.issuanceDepth,
      }

      if (options.exp !== undefined && options.nbf !== undefined
        && options.exp <= options.nbf) {
        return cb('The `nbf` parameter cannot be set to a later time than `exp`.');
      }

      if (options.code_url)
        params.url = options.code_url;
      if (options.code) 
        params.code = options.code;
      if (options.secret && Object.keys(options.secret).length > 0)
        params.ectx = options.secret;
      if (options.param && Object.keys(options.param).length > 0)
        params.pctx = options.param;
      if (options.nbf !== undefined)
        params.nbf = options.nbf;
      if (options.exp !== undefined)
        params.exp = options.exp;
      if (options.merge)
        params.mb = 1;
      if (options.parse)
        params.pb = 1;
      if (!options.selfRevoke)
        params.dr = 1;

      try {
        if (options.tokenLimit)
          add_limits(options.tokenLimit, program.wt.token_limits);
        if (options.containerLimit)
          add_limits(options.containerLimit, program.wt.container_limits);
      } catch (e) {
        return cb(e.message);
      }

      function add_limits(limits, spec) {
        for (var l in limits) {
          if (!spec[l]) {
            throw new Error('Unsupported limit type `' + l + '`. Supported limits are: ' + Object.keys(spec).join(', ') + '.');
          }
          if (isNaN(limits[l]) || Math.floor(+limits[l]) !== +limits[l] || +limits[l] < 1) {
            throw new Error('Unsupported limit value for `' + l + '` limit. All limits must be positive integers.');
          }
          params[spec[l]] = +limits[l];
        }
      }

      request({
        url: options.url + '/api/tokens/issue',
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + options.token
        },
        body: JSON.stringify(params)
      }, function (error, res, body) {
        if (error) {
          return cb('Failed to create a webtask: ' + error.message);
        }
        if (res.statusCode !== 200) {
          var msg = 'Failed to create a webtask. HTTP ' + res.statusCode;
          try {
            msg += ':\n' + JSON.stringify(JSON.parse(body), null, 2);
          }
          catch (__) {}
          return cb(msg);
        }
        var webtask_url = options.url + '/api/run/' + options.container + '?key=' + body;

        cb(null, {
          token: body,
          webtask_url: webtask_url,
        });
      });
    },
};

// Load confguration


if (fs.existsSync(program.wt.config_file)) {
  try {
    program.wt.config = JSON.parse(fs.readFileSync(program.wt.config_file, 'utf8'));
  }
  catch (e) {
    logger.error({ 
      file: program.wt.config_file, 
      error: e.message || e 
    }, 'Unable to read wt configuration file. Please fix it or remote it.');
    process.exit(1);
  }
}
else {
  program.wt.config = {};
}

// Register commands

require('./command_init.js');
require('./command_create.js');
require('./command_logs.js');
require('./command_profile.js');
require('./command_nuke.js');
require('./command_cron.js')

// Run

program.parse(process.argv);

if (!process.argv.slice(2).length) {
    program.outputHelp();
    process.exit(1);
}
